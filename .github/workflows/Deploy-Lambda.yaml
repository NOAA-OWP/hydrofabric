on:
  push:
    paths:
      - subset/runtime.R
      - subset/Dockerfile
      - R/**.R

name: Build and Deploy Lambda

jobs:
  container:
    name: Deploy container to ECR
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ECR_REPOSITORY: hfsubset
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Verify ECR Repository
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          (aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} \
            && docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest) \
          || aws ecr create-repository --repository-name ${ECR_REPOSITORY}

      - name: Build and tag image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: "./subset"
        run: |
          docker build \
            --cache-from "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest" \
            --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" \
            --tag="${ECR_REGISTRY}/${ECR_REPOSITORY}:latest" .

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker push ${ECR_REGISTRY}/${ECR_REPOSITORY} --all-tags

      - name: Check Lambda function
        id: lambda-function
        continue-on-error: true
        env:
          LAMBDA_FUNCTION: hfsubset
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: aws lambda wait function-exists --function-name ${LAMBDA_FUNCTION} > /dev/null 2>&1

      - name: Create Lambda function
        if: steps.lambda-function.outcome == 'failure'
        env:
          LAMBDA_FUNCTION: hfsubset
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_ACCOUNT_ID: ${{ steps.aws-credentials.outputs.aws-account-id }}
        working-directory: ./subset
        run: |
            aws iam create-role \
              --role-name ${LAMBDA_FUNCTION}-role \
              --assume-role-policy-document '{"Version": "2012-10-17","Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}'

            aws iam attach-role-policy \
              --role-name ${LAMBDA_FUNCTION}-role \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

            aws lambda create-function \
              --function-name ${LAMBDA_FUNCTION} \
              --role "arn:aws:iam:${AWS_ACCOUNT_ID}:role/${LAMBDA_FUNCTION}-role"

            # TODO: put this behind an API Gateway?
            output=$(aws lambda create-function-url-config --function-name ${LAMBDA_FUNCTION} --auth-type NONE)

            echo ":rocket: lambda function running at $(echo $output | jq .FunctionUrl)" >> $GITHUB_STEP_SUMMARY

      - name: Update Lambda function
        if: steps.lambda-function.outcome == 'success'
        env:
          LAMBDA_FUNCTION: hfsubset
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          aws lambda update-function-code \
              --function-name ${LAMBDA_FUNCTION} \
              --image-uri "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
